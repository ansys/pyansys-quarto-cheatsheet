on:
  pull_request:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.13'
  DOCUMENTATION_CNAME: 'quarto-cheat-sheet.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


name: CI

jobs:
  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - name: "Run code style checks"
        uses: ansys/actions/code-style@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    steps:
      - name: "Run documentation style checks"
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "3.3.0"

  create-archives:
    name: "Create archives and build documentation"
    runs-on: ubuntu-latest
    needs: [code-style, doc-style]
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v4

      - name: "Install zip, gzip, tar"
        run: |
          sudo apt-get update
          sudo apt-get install zip gzip tar -y

      - name: "Create archives"
        run: |
          zip -r cheat_sheet.zip _extensions
          tar -czvf cheat_sheet.tar.gz _extensions

      - name: "List files in directory"
        run: |
          ls -l

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          path: |
            cheat_sheet.zip
            cheat_sheet.tar.gz

      - name: "Set up Quarto"
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          tinytex: true

      - name: "Check Quarto version"
        run: |
          quarto --version

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install dependencies"
        run: |
          quarto add cheat_sheet.tar.gz --no-prompt
          python3 -m pip install jupyter
          python3 -m pip install -r requirements/requirements_doc.txt

      - name: "Build documentation"
        run: |
          make -C doc html

      - name: "Render cheat sheet"
        run: |
          quarto render examples/cheat_sheet.qmd --to cheat_sheet-pdf

      - name: "Move pdf to documentation"
        run: |
          mv examples/_build/cheat_sheet.pdf doc/_build/html/_static

      - name: "Upload documentation artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: doc/_build/html


  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags')
    needs: [create-archives]
    steps:
      - uses: ansys/actions/doc-deploy-dev@v8
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
  release:
    name: "Release to github"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: create-archives
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v4

      - name: "Download artifacts"
        uses: actions/download-artifact@v4

      - name: "List files in directory"
        run: |
          ls -l

      - name: "compress documentation"
        uses: vimtor/action-zip@v1.2
        with:
          files: documentation-html
          dest: documentation-html.zip

      - name: "Create release"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            cheat_sheet.zip
            cheat_sheet.tar.gz
            documentation-html.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: release
    steps:
      - uses: ansys/actions/doc-deploy-stable@v8
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
